<?xml version="1.0" encoding="UTF-8"?>
<!--
	Module Name: fiscalprocs.xml
	Module Description: BK Manager procedures

	Created by: garaujo
-->
<Procedures>
	<Procedure name="fiscal_saveFiscalData">
		INSERT INTO fiscal.FiscalData(PosId, OrderId, DataNota, NumeroNota, NumeroSat, XMLRequest, SentToNfce, XMLResponse)
			SELECT CAST(:pos_id AS integer), CAST(:order_id AS integer), CAST(:data_nota as varchar), CAST(:numero_nota as varchar), CAST(:numero_sat AS varchar), CAST(:xml_request AS varchar), CAST(:sent_to_nfce AS integer), CAST(:xml_response AS varchar);
	</Procedure>

	<Procedure name="fiscal_savePaymentData">
		INSERT INTO fiscal.PaymentData(PosId, OrderId, TenderSeqId, Type, Amount, Change, AuthCode, IdAuth, CNPJAuth, Bandeira, ReceiptMerchant, ReceiptCustomer, PaymentId)
			SELECT CAST(:pos_id AS integer), CAST(:order_id AS integer), CAST(:tender_seq_id AS integer), CAST(:type AS integer), CAST(:amount AS decimal), CAST(:change AS decimal),
            CAST(:auth_code AS varchar), CAST(:id_auth AS varchar), CAST(:cnpj_auth AS varchar), CAST(:bandeira AS varchar), CAST(:receipt_merchant AS varchar),
            CAST(:receipt_customer AS varchar), CAST(:payment_id AS varchar);
	</Procedure>

    <Procedure name="fiscal_getEFTData">
        SELECT d.AuthCode, d.IdAuth, d.CNPJAuth, d.Bandeira, d.ReceiptMerchant, d.ReceiptCustomer, b.Descricao as BandDescr
        FROM fiscal.PaymentData AS d
        JOIN fiscal.BandeiraCartao AS b ON b.Bandeira = d.Bandeira
        WHERE d.OrderId = CAST(:order_id AS integer) AND d.Type BETWEEN 1 AND 2;
    </Procedure>

	<Procedure name="fiscal_getTenders">
        SELECT TenderSeqId, Type, Amount, Change, Bandeira, AuthCode, CNPJAuth, ReceiptCustomer, ReceiptMerchant
		FROM PaymentData
		WHERE OrderId = :order_id
		AND Amount >= 0
    </Procedure>

    <Procedure name="fiscal_getBKOfficeToSend_asc">
        SELECT fd.OrderId, fd.PosId, fd.NumeroSat, fd.XmlRequest, fd.OrderPicture, fd.NumeroNota, fd.XMLResponse
        FROM FiscalData fd
        WHERE SentToNfce = 1 AND (SentToBKOffice = 0 OR (SentToBKOffice BETWEEN -100 AND -2 AND (NextDateToSend &lt; strftime('%s', 'now') OR NextDateToSend IS NULL) ) )
        GROUP BY fd.OrderId
        ORDER BY fd.OrderId asc
        LIMIT 500
	</Procedure>

    <Procedure name="fiscal_getBKOfficeToSend_desc">
        SELECT fd.OrderId, fd.PosId, fd.NumeroSat, fd.XmlRequest, fd.OrderPicture, fd.NumeroNota, fd.XMLResponse
        FROM FiscalData fd
        WHERE SentToNfce = 1 AND (SentToBKOffice = 0 OR (SentToBKOffice BETWEEN -100 AND -2 AND (NextDateToSend &lt; strftime('%s', 'now') OR NextDateToSend IS NULL) ) )
        GROUP BY fd.OrderId
        ORDER BY fd.OrderId desc
        LIMIT 500
	</Procedure>

	<Procedure name="fiscal_getBKOfficeToSendOrderID">
		SELECT fd.OrderId, fd.PosId, fd.NumeroSat, fd.XmlRequest, fd.OrderPicture, fd.NumeroNota, fd.XMLResponse
		FROM FiscalData fd
		LEFT OUTER JOIN PaymentData pd
		ON fd.OrderId = pd.OrderId
		WHERE fd.OrderId = :order_id
    </Procedure>

    <Procedure name="fiscal_getNfceToSend">
		SELECT OrderId, PosId, XmlRequest, NumeroNota, OrderPicture
        FROM FiscalData
        WHERE SentToNfce = 0
        LIMIT CAST(:limit AS integer)
    </Procedure>

    <Procedure name="fiscal_getNfceToSendCount">
		SELECT COUNT(1)
        FROM FiscalData fd
        WHERE SentToNfce = 0
	</Procedure>

	<Procedure name="fiscal_setNfceSent">
		UPDATE fiscal.FiscalData
		SET SentToNfce = :status
		WHERE OrderId = :order_id
	</Procedure>

	<Procedure name="fiscal_setNfceSentXml">
		UPDATE fiscal.FiscalData
		SET SentToNfce = :status, XMLRequest = :xml_request
		WHERE OrderId = :order_id
	</Procedure>

	<Procedure name="fiscal_setNfceSentXmlBKOffice">
		UPDATE fiscal.FiscalData
		SET SentToNfce = :status, XMLRequest = :xml_request, SentToBKOffice = :sent_to_bkoffice
		WHERE OrderId = :order_id
	</Procedure>

    <Procedure name="fiscal_getBKCToSend">
		SELECT PosId, OrderId, XmlRequest, OrderPicture
		FROM FiscalData
		WHERE (SentToBKC = 0 OR (SentToBKC BETWEEN -100 AND -1 AND (NextDateToSendToBKC &lt; strftime('%s', 'now') OR NextDateToSendToBKC IS NULL) ) )
		      AND (SentToNfce = 1) AND (DataNota BETWEEN CAST(:min_date AS integer) AND CAST(:max_date AS integer))
		ORDER BY PosId, OrderId LIMIT 500 OFFSET CAST(:offset AS integer)
    </Procedure>

	<Procedure name="fiscal_PurgeData">
		DELETE FROM PaymentData WHERE OrderId IN (SELECT OrderId FROM FiscalData WHERE SentToBKC = 1 AND SentToBKOffice = 1 AND SentToNfce = 1 AND strftime('%s', 'now', '-30 days') > DataNota);
		DELETE FROM FiscalData WHERE SentToBKC = 1 AND SentToBKOffice = 1 AND SentToNfce = 1 AND strftime('%s', 'now', '-:days_to_keep days') > DataNota
    </Procedure>

    <Procedure name="fiscal_getBKCToFixDataNota">
		SELECT PosId, OrderId, XmlRequest
		FROM FiscalData
		WHERE DataNota = 1
		ORDER BY OrderId DESC LIMIT 500 OFFSET CAST(:offset AS integer)
    </Procedure>

	<Procedure name="fiscal_setOrderIgnoredBKC">
		UPDATE fiscal.FiscalData SET SentToBKC = - 1
        WHERE OrderId = CAST(:order_id AS integer);
	</Procedure>

	<Procedure name="fiscal_setOrderIgnored">
		UPDATE fiscal.FiscalData SET SentToBKOffice = -1
        WHERE OrderId = CAST(:order_id AS integer);
	</Procedure>

	<Procedure name="fiscal_setDataNota">
		UPDATE fiscal.FiscalData SET DataNota = CAST(:data_nota AS varchar)
        WHERE OrderId = CAST(:order_id AS integer)
	</Procedure>

	<Procedure name="fiscal_removeOldFiscalData">
		DELETE FROM fiscal.FiscalData
        WHERE CAST(:min_order_id AS integer) >= OrderId
	</Procedure>

	<Procedure name="fiscal_removeOldPaymentData">
		DELETE FROM fiscal.PaymentData
        WHERE CAST(:min_order_id AS integer) >= OrderId
	</Procedure>

	<Procedure name="fiscal_setOrderPicture">
		UPDATE fiscal.FiscalData SET OrderPicture = CAST(:order_picture AS varchar)
        WHERE OrderId = CAST(:order_id AS integer)
	</Procedure>

	<Procedure name="fiscal_setOrderCanceled">
		UPDATE fiscal.FiscalData SET SentToNfce = -1
        WHERE OrderId = CAST(:order_id AS integer)
	</Procedure>

	<Procedure name="fiscal_getRequestXMLFiscalData">
		SELECT XmlRequest
        FROM fiscal.FiscalData
        WHERE OrderId = CAST(:order_id AS integer)
    </Procedure>

    <Procedure name="fiscal_getRequestXMLFiscalData_byDate">
		SELECT PosId, OrderId, NumeroNota, XmlRequest, OrderPicture, DataNota
		FROM fiscal.FiscalData
		WHERE (DataNota BETWEEN CAST(:begin_date AS integer) AND CAST(:end_date AS integer))
		ORDER BY OrderId LIMIT 500 OFFSET CAST(:offset AS integer)
    </Procedure>
    <Procedure name="fiscal_getEFTData_byDate">
        SELECT d.OrderId, d.TenderSeqId, d.Bandeira, b.Descricao as BandDescr
        FROM fiscal.PaymentData AS d
        JOIN fiscal.BandeiraCartao AS b ON b.Bandeira = d.Bandeira
        WHERE d.OrderId IN (SELECT OrderId FROM FiscalData WHERE (DataNota BETWEEN CAST(:begin_date AS integer) AND CAST(:end_date AS integer))) AND d.Type BETWEEN 1 AND 2;
    </Procedure>

	<Procedure name="fiscal_getResponseXMLFiscalData">
		SELECT XMLResponse
        FROM fiscal.FiscalData
        WHERE OrderId = CAST(:order_id AS integer)
    </Procedure>

	<Procedure name="fiscal_getSatNumberAndRequestXMLFiscalData">
		SELECT NumeroSat, XMLRequest
        FROM fiscal.FiscalData
        WHERE OrderId = CAST(:order_id AS integer)
    </Procedure>

    <Procedure name="fiscal_getBandeiras">
        SELECT Bandeira, Descricao, Type
        FROM fiscal.bandeiracartao
    </Procedure>
</Procedures>
