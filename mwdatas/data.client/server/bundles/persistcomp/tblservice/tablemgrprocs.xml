<?xml version="1.0" encoding="UTF-8"?>
<!--
	Module Name: tablemgrprocs.xml
	Module Description: Procedures used by the Table Service Manager

  Copyright (C) 2018 MWneo Corporation
  Copyright (C) 2018 Omega Tech Enterprises Ltd. 
  (All rights transferred from MWneo Corporation to Omega Tech Enterprises Ltd.)

	Created by: amerolli Last Modified by: $Author: amerolli $
-->
<Procedures>
		<!--  Procedures that depends on TBLService DDL  -->
		<Procedure name="resetStoreLayout">
				INSERT OR REPLACE INTO tblservice.RestaurantTable(TableId, NumberOfSeats, Sector, TypeId, Status, POSId, LinkedTableId)
				SELECT SL.TableId, SL.NumberOfSeats, SL.Sector, RT.TypeId, RT.Status, RT.POSId, RT.LinkedTableId
				FROM (
						SELECT
								JSONGet('id', L.Id) AS TableId,
								COALESCE(CAST(JSONGet('numberOfSeats', L.Id) AS INTEGER), 1) AS NumberOfSeats,
								JSONGet('sector', L.Id) AS Sector
						FROM
								PreparedStringTable L
				) SL
				JOIN tblservice.RestaurantTable RT ON RT.TableId=SL.TableId;
				
				INSERT OR REPLACE INTO tblservice.RestaurantTable(TableId, NumberOfSeats, Sector)
				SELECT SL.TableId, SL.NumberOfSeats, SL.Sector
				FROM (
						SELECT
								JSONGet('id', L.Id) AS TableId,
								COALESCE(CAST(JSONGet('numberOfSeats', L.Id) AS INTEGER), 1) AS NumberOfSeats,
								JSONGet('sector', L.Id) AS Sector
						FROM
								PreparedStringTable L
				) SL
				LEFT JOIN tblservice.RestaurantTable RT ON RT.TableId=SL.TableId
				WHERE RT.TableId IS NULL;

				DELETE FROM tblservice.RestaurantTable
				WHERE Status IN (SELECT Status FROM tblservice.TableStatus WHERE TableStatus.Descr IN ('Closed'))
				  AND TypeId=2;

				DELETE FROM tblservice.RestaurantTable
				WHERE TypeId=1
				  AND Status IN (SELECT Status FROM tblservice.TableStatus WHERE TableStatus.Descr IN ('Available', 'Closed'))
				  AND TableId NOT IN (SELECT JSONGet('id', L.Id) FROM PreparedStringTable L);
		</Procedure>
		<Procedure name="listTables">
				SELECT 
				    T.TableId AS id,
				    T.TypeId AS type,
				    TT.Descr AS typeDescr,
				    T.NumberOfSeats AS seats,
				    T.Status AS status,
				    TS.Descr AS statusDescr,
				    T.POSId AS currentPOSId,
				    T.Sector AS sector,
				    S.ServiceId AS serviceId,
				    S.BusinessPeriod AS businessPeriod,
				    S.UserId AS userId,
				    S.serviceSeats AS serviceSeats,
				    S.StartTS AS startTS,
				    S.FinishedTS AS finishTS,
				    S.LastUpdateTS AS lastUpdateTS,
				    S.CurrentOrderId AS currentOrderId,
				    S.TotalAmount AS totalAmount,
				    tddiv(S.TotalAmount, S.serviceSeats, 2, 5) AS totalPerSeat,
				    COALESCE(S.Orders, 'null') AS orders,
				    COALESCE(S.SplitOrders, 'null') AS splitOrders,
				    COALESCE(S.LinkedTables, 'null') AS linkedTables,
				    COALESCE(
					    CASE WHEN COALESCE(CAST(:withProps AS INTEGER), 0) = 1
				    		THEN (
								SELECT '{'||GROUP_CONCAT('"'||JSONEscape(PropertyKey)||'": '||COALESCE('"'||JSONEscape(PropertyValue)||'"','null'))||'}'
								FROM tblservice.ServiceCustomProperty
								WHERE ServiceId=S.ServiceId
				    		)
				    		ELSE NULL
					    END, 
					    'null'
					) AS properties,
					COALESCE(S.SlicedServices, 'null') AS slicedServices,
					T.LinkedTableId AS parentLinkedTableId,
					S.SourceTableId AS sliceSourceTableId,
					(
						SELECT OS.StateDescr
						FROM orderdb.POS P
						JOIN orderdb.Orders O
						  ON O.OrderId=P.CurrentOrder
						JOIN orderdb.OrderState OS
						  ON OS.StateId=O.StateId
						WHERE P.POSId=T.POSId AND O.StateId&lt;4
					) AS currentOrderState,
					(
						SELECT P.CurrentOrder
						FROM orderdb.POS P
						JOIN orderdb.Orders O
						  ON O.OrderId=P.CurrentOrder
						JOIN orderdb.OrderState OS
						  ON OS.StateId=O.StateId
						WHERE P.POSId=T.POSId AND O.StateId&lt;4
					) AS currentPOSOrderID,
					(
						SELECT tdsum(CalculatedTip)
						FROM tblservice.ServiceTip ST
						WHERE ST.ServiceId=S.ServiceId
					) AS tipAmount
				FROM tblservice.RestaurantTable T
				JOIN tblservice.TableType TT On TT.TypeId=T.TypeId
				JOIN tblservice.TableStatus TS On TS.Status=T.Status
				LEFT JOIN tblservice.LatestServicesByTable S ON S.TableId=T.TableId
				WHERE
				    T.TableId = COALESCE(CAST(:tableId AS VARCHAR), T.TableId) AND
				    COALESCE(S.UserId,-1)=COALESCE(CAST(:userId AS INTEGER),S.UserId,-1);
		</Procedure>
		<Procedure name="getSplitServiceOrders">
				SELECT DISTINCT SplitKey AS splitKey, OrderId AS originalOrderId, SplitOrderId AS splitOrderId
				  FROM tblservice.ServiceSplit
				 WHERE ServiceId=CAST(:serviceId AS INTEGER);
		</Procedure>
		<Procedure name="registerSplitService">
				INSERT INTO tblservice.ServiceSplit(ServiceId, SplitKey, OrderId, LineNumber, SplitOrderId)
				SELECT
						TS.ServiceId AS ServiceId,
						CAST(JSONGet('splitKey', L.Id) AS VARCHAR) AS SplitKey,
						CAST(JSONGet('originalOrderId', L.Id) AS INTEGER) AS OriginalOrderId,
						CAST(JSONGet('lineNumber', L.Id) AS INTEGER) AS LineNumber,
						CAST(JSONGet('splitOrderId', L.Id) AS INTEGER) AS SplitOrderId
				FROM
						PreparedStringTable L
				JOIN
						tblservice.TableService TS ON 1=1
				WHERE
						TS.ServiceId=CAST(:serviceId AS INTEGER);
		</Procedure>
		<Procedure name="registerServiceTip">
				DELETE FROM tblservice.ServiceTip
				WHERE ServiceId=CAST(:serviceId AS INTEGER);
		
				INSERT INTO tblservice.ServiceTip(ServiceId, SplitKey, SplitOrderId, TipRate, TipAmount, CalculatedTip)
				SELECT
						CAST(:serviceId AS INTEGER) AS ServiceId,
						SplitKey,
						SplitOrderId,
						TipRate,
						TipAmount,
						CalculatedTip
				FROM (
						SELECT
								CAST(JSONGet('splitKey', L.Id) AS VARCHAR) AS SplitKey,
								CAST(JSONGet('splitOrderId', L.Id) AS INTEGER) AS SplitOrderId,
								CAST(JSONGet('rate', L.Id) AS VARCHAR) AS TipRate,
								CAST(JSONGet('amount', L.Id) AS VARCHAR) AS TipAmount,
								CAST(JSONGet('tip', L.Id) AS VARCHAR) AS CalculatedTip
						FROM
								PreparedStringTable L
				) OrderTip;
		</Procedure>
		<Procedure name="getServiceTips">
				SELECT SplitKey AS splitKey, SplitOrderId AS orderId, TipRate AS rate, TipAmount AS amount, CalculatedTip AS tip
				  FROM tblservice.ServiceTip
				 WHERE ServiceId=CAST(:serviceId AS INTEGER);
		</Procedure>
		<Procedure name="clearServiceTips">
				DELETE FROM tblservice.ServiceTip
				WHERE ServiceId=CAST(:serviceId AS INTEGER)
				  AND SplitOrderId=COALESCE(CAST(:orderId AS INTEGER), SplitOrderId);
		</Procedure>
		<Procedure name="updateCurrentOrderId">
				UPDATE tblservice.TableService
				SET OrderId=CAST(:orderId AS INTEGER)
				WHERE ServiceId=(
						SELECT ServiceId
						FROM tblservice.TableService
						WHERE TableId=(
								SELECT TableId
								  FROM tblservice.RestaurantTable
								 WHERE POSId=CAST(:posId AS INTEGER)
						)
						AND FinishedTS IS NULL
				);
		</Procedure>
		<Procedure name="updateCurrentOrderState">
				UPDATE tblservice.ServiceOrders
				SET State=CAST(:state AS VARCHAR)
				WHERE ServiceId IN (
						SELECT ServiceId
						  FROM tblservice.TableService
						 WHERE FinishedTS IS NULL
				)
				AND OrderId=CAST(:orderId AS INTEGER);
		</Procedure>
		<Procedure name="startService">
				DELETE FROM temp.TSMemory;

				INSERT INTO temp.TSMemory(MemKey, MemValue)
				SELECT MemKey, MemValue
				FROM (
						SELECT 'TabId' AS MemKey, 'TAB-'||(MAX(_ROWID_)+1) AS MemValue
						FROM tblservice.RestaurantTable
						WHERE CAST(:typeId AS INTEGER) = 2
				) M
				WHERE M.MemValue IS NOT NULL;
				
				INSERT INTO tblservice.RestaurantTable(TableId, NumberOfSeats, TypeId, Status, POSId)
				SELECT MemValue, COALESCE(CAST(:numberOfSeats AS INTEGER),1), 2, (SELECT Status FROM tblservice.TableStatus WHERE TableStatus.Descr='Waiting2BSeated'), CAST(:posId AS INTEGER)
				  FROM temp.TSMemory
				 WHERE MemKey='TabId' AND CAST(:typeId AS INTEGER) = 2;
				
				INSERT INTO temp.TSMemory(MemKey, MemValue)
				SELECT 'LastServiceId' AS MemKey, COALESCE(MAX(ServiceId),0) AS MemValue 
				FROM tblservice.TableService;

				INSERT INTO tblservice.TableService(BusinessPeriod, TableId, UserId, NumberOfSeats, SourceServiceId)
				SELECT
						DATE(:businessPeriod),
						RT.TableId,
						CAST(:userId AS INTEGER),
						COALESCE(CAST(:numberOfSeats AS INTEGER),RT.NumberOfSeats),
						(SELECT ServiceId FROM tblservice.TableService WHERE ServiceId=CAST(:srcServiceId AS INTEGER) LIMIT 1)
				FROM tblservice.RestaurantTable RT
				WHERE RT.TableId=COALESCE(
						(SELECT MemValue FROM temp.TSMemory WHERE MemKey='TabId'),
						CAST(:tableId AS VARCHAR)
				);
								
				INSERT INTO temp.TSMemory(MemKey, MemValue)
				SELECT A.MemKey, A.MemValue
				FROM (
						SELECT 'NewServiceId' AS MemKey, MAX(ServiceId) AS MemValue FROM tblservice.TableService
				) A
				JOIN (
						SELECT MemKey, CAST(MemValue AS INTEGER) AS MemValue FROM temp.TSMemory WHERE MemKey='LastServiceId'
				) B ON 1=1
				WHERE A.MemValue IS NOT NULL AND A.MemValue&gt;B.MemValue;
				
				UPDATE tblservice.RestaurantTable
				SET Status=(SELECT Status FROM tblservice.TableStatus WHERE TableStatus.Descr=COALESCE(CAST(:statusDescr AS VARCHAR), 'Seated')),
				    POSId=CAST(:posId AS INTEGER)
				WHERE TableId=(
						SELECT TableId FROM tblservice.TableService 
						WHERE TypeId=1
						  AND ServiceId=(SELECT CAST(MemValue AS INTEGER) FROM temp.TSMemory WHERE MemKey='NewServiceId')
			  );

				SELECT ServiceId AS serviceId, TableId AS tableId
				FROM tblservice.TableService
				JOIN temp.TSMemory 
				  ON TSMemory.MemKey='NewServiceId'
				 AND TableService.ServiceId=CAST(TSMemory.MemValue AS INTEGER);				
		</Procedure>
		<Procedure name="recallService">
				UPDATE tblservice.RestaurantTable
				SET POSId=CAST(:posId AS INTEGER)
				WHERE POSId is NULL
				  AND TableId=(
						SELECT TableId FROM tblservice.TableService 
						WHERE ServiceId=CAST(:serviceId AS INTEGER)
				); 
		</Procedure>
		<Procedure name="storeService">
				UPDATE tblservice.RestaurantTable
				SET POSId=NULL
				WHERE POSId=CAST(:posId AS INTEGER)
				  AND TableId=(
						SELECT TableId FROM tblservice.TableService 
						WHERE ServiceId=CAST(:serviceId AS INTEGER)
				);
				UPDATE tblservice.TableService
				   SET OrderId=NULL
				 WHERE ServiceId=CAST(:serviceId AS INTEGER);
		</Procedure>
		<Procedure name="updateTableServiceStatus">
				-- Update the Table status as requested ...
				UPDATE tblservice.RestaurantTable
				SET Status=(SELECT Status FROM tblservice.TableStatus WHERE TableStatus.Descr=CAST(:status AS VARCHAR))
				WHERE TableId=COALESCE(
						(SELECT TableId FROM tblservice.TableService WHERE ServiceId=CAST(:serviceId AS INTEGER)),
						CAST(:tableId AS VARCHAR)
				); 

				-- Updates Closed service
				UPDATE tblservice.TableService
				SET FinishedTS=strftime('%Y-%m-%dT%H:%M:%f', 'now')
				WHERE ServiceId IN (
								SELECT CAST(:serviceId AS INTEGER)
								UNION
								SELECT ServiceId FROM tblservice.LatestServicesByTable
								WHERE TableId IN (
										SELECT TableId FROM tblservice.RestaurantTable
										WHERE LinkedTableId=(
												SELECT TableId FROM tblservice.TableService WHERE ServiceId=CAST(:serviceId AS INTEGER)
										)
								) 
						)
				AND EXISTS (
						SELECT 1 FROM tblservice.RestaurantTable
						 WHERE TableId=(SELECT TableId FROM tblservice.TableService WHERE ServiceId=CAST(:serviceId AS INTEGER))
						   AND Status=(SELECT Status FROM tblservice.TableStatus WHERE TableStatus.Descr="Closed")
				);
				
				UPDATE tblservice.RestaurantTable
				SET POSId=NULL
				WHERE TableId=(
						SELECT TableId FROM tblservice.TableService WHERE ServiceId=CAST(:serviceId AS INTEGER)
				) 
				AND Status=(SELECT Status FROM tblservice.TableStatus WHERE TableStatus.Descr="Closed");
				
				UPDATE tblservice.RestaurantTable
				SET POSId=NULL,
				    Status=(SELECT Status FROM tblservice.TableStatus WHERE TableStatus.Descr="Closed"),
				    LinkedTableId=(CASE WHEN TypeId=1 THEN NULL ELSE LinkedTableId END) 
				WHERE LinkedTableId=(
						SELECT TableId FROM tblservice.TableService WHERE ServiceId=CAST(:serviceId AS INTEGER)
				) 
				AND Status=(SELECT Status FROM tblservice.TableStatus WHERE TableStatus.Descr="Linked")
				AND EXISTS (
						SELECT 1 FROM tblservice.RestaurantTable
						 WHERE TableId=(SELECT TableId FROM tblservice.TableService WHERE ServiceId=CAST(:serviceId AS INTEGER))
						   AND Status=(SELECT Status FROM tblservice.TableStatus WHERE TableStatus.Descr="Closed")
				); 

				-- Updates Totaled service
				UPDATE tblservice.TableService
				SET TotalAmount=(
						CASE WHEN EXISTS (
									SELECT 1 FROM tblservice.RestaurantTable
									WHERE TableId=(
											SELECT TableId FROM tblservice.TableService WHERE ServiceId=CAST(:serviceId AS INTEGER)
									) AND Status=(SELECT Status FROM tblservice.TableStatus WHERE TableStatus.Descr="Totaled")
							) 
							THEN CAST(:totalAmount AS VARCHAR)
							ELSE NULL
						END
				)
				WHERE ServiceId=CAST(:serviceId AS INTEGER);
		</Procedure>
		<Procedure name="updateServiceUser">
				UPDATE tblservice.TableService
				   SET UserId=CAST(:userId AS INTEGER)
				 WHERE ServiceId=CAST(:serviceId AS INTEGER)
				   AND FinishedTS IS NULL;
		</Procedure>
		<Procedure name="updateServiceNumberOfSeats">
				UPDATE tblservice.TableService
				   SET NumberOfSeats=CAST(:numberOfSeats AS INTEGER)
				 WHERE ServiceId=CAST(:serviceId AS INTEGER)
				   AND FinishedTS IS NULL;
		</Procedure>
		<Procedure name="registerServiceOrder">
				INSERT OR REPLACE INTO tblservice.ServiceOrders(ServiceId, OrderId, POSId, UserId, State)
				SELECT CAST(:serviceId AS INTEGER) AS ServiceId,
				       CAST(:orderId AS INTEGER) AS OrderId,
				       CAST(:posId AS INTEGER) AS POSId,
				       COALESCE(
						       (SELECT UserId FROM tblservice.ServiceOrders
						        WHERE ServiceId=CAST(:serviceId AS INTEGER)
						          AND OrderId=CAST(:orderId AS INTEGER)),
						       (SELECT UserId FROM tblservice.TableService
						        WHERE ServiceId=CAST(:serviceId AS INTEGER))
				       ) AS UserId,
				       COALESCE(
						       (SELECT State FROM tblservice.ServiceOrders
						        WHERE ServiceId=CAST(:serviceId AS INTEGER)
						          AND OrderId=CAST(:orderId AS INTEGER)),
						       'IN_PROGRESS'
				       ) AS State;
		</Procedure>
		<Procedure name="setServiceCustomProperty">
				INSERT OR REPLACE INTO tblservice.ServiceCustomProperty(ServiceId,PropertyKey,PropertyValue)
				SELECT
					CAST(:serviceId AS INTEGER) AS ServiceId,
					CAST(:propertyKey AS VARCHAR) AS PropertyKey,
					CAST(:propertyValue AS VARCHAR) AS PropertyValue
				WHERE
					CAST(:propertyKey AS VARCHAR) IS NOT NULL
				UNION
				SELECT
					CAST(:serviceId AS INTEGER) AS ServiceId,
					JSONGet('propKey', L.Id) AS PropertyKey,
					JSONGet('propValue', L.Id) AS PropertyValue
				FROM
					PreparedStringTable L;
				DELETE FROM tblservice.ServiceCustomProperty WHERE ServiceId = CAST(:serviceId AS INTEGER) AND PropertyValue IS NULL;  
		</Procedure>
		<Procedure name="getServiceCustomProperty">
				SELECT PropertyKey AS propertyKey, PropertyValue AS propertyValue
				FROM tblservice.ServiceCustomProperty
				WHERE ServiceId = CAST(:serviceId AS INTEGER) AND
				      PropertyKey = COALESCE(CAST(:propertyKey AS VARCHAR), PropertyKey);
		</Procedure>
		<Procedure name="moveTable">
				INSERT INTO tblservice.ServiceOrders(ServiceId, OrderId, POSId, UserId, State)
				SELECT CAST(:destServiceId AS INTEGER), ServiceOrders.OrderId, ServiceOrders.POSId, ServiceOrders.UserId, ServiceOrders.State
				FROM tblservice.ServiceOrders
				WHERE ServiceOrders.ServiceId = CAST(:fromServiceId AS INTEGER)
				AND EXISTS (
					  SELECT 1 FROM tblservice.TableService WHERE ServiceId=CAST(:destServiceId AS INTEGER)
				); 
				    
				DELETE FROM tblservice.ServiceOrders
				WHERE ServiceId=CAST(:fromServiceId AS INTEGER);

				UPDATE tblservice.RestaurantTable
				SET Status=(SELECT Status FROM tblservice.TableStatus WHERE TableStatus.Descr="Closed"),
				    POSId=NULL
				WHERE TableId=(
						SELECT TableId FROM tblservice.TableService 
						WHERE ServiceId=CAST(:fromServiceId AS INTEGER)
				);
				
				UPDATE tblservice.RestaurantTable
				SET POSId=NULL,
				    Status=(SELECT Status FROM tblservice.TableStatus WHERE TableStatus.Descr="Closed"),
				    LinkedTableId=(CASE WHEN TypeId=1 THEN NULL ELSE LinkedTableId END)
				WHERE LinkedTableId=(
						SELECT TableId FROM tblservice.TableService WHERE ServiceId=CAST(:fromServiceId AS INTEGER)
				) 
				AND Status=(SELECT Status FROM tblservice.TableStatus WHERE TableStatus.Descr="Linked")
				AND EXISTS (
						SELECT 1 FROM tblservice.RestaurantTable
						WHERE TableId=(SELECT TableId FROM tblservice.TableService WHERE ServiceId=CAST(:fromServiceId AS INTEGER))
						  AND Status=(SELECT Status FROM tblservice.TableStatus WHERE TableStatus.Descr="Closed")
				); 

				UPDATE tblservice.TableService
				SET FinishedTS=strftime('%Y-%m-%dT%H:%M:%f', 'now')
				WHERE ServiceId IN (
								SELECT CAST(:fromServiceId AS INTEGER)
								UNION
								SELECT ServiceId FROM tblservice.LatestServicesByTable
								WHERE TableId IN (
										SELECT TableId FROM tblservice.RestaurantTable
										WHERE LinkedTableId=(
												SELECT TableId FROM tblservice.TableService WHERE ServiceId=CAST(:fromServiceId AS INTEGER)
										)
								) 
						)
				AND EXISTS (
						SELECT 1 FROM tblservice.RestaurantTable
						 WHERE TableId=(SELECT TableId FROM tblservice.TableService WHERE ServiceId=CAST(:fromServiceId AS INTEGER))
						   AND Status=(SELECT Status FROM tblservice.TableStatus WHERE TableStatus.Descr="Closed")
				);

				UPDATE tblservice.TableService
				SET NumberOfSeats=COALESCE(CAST(:numberOfSeats AS INTEGER), NumberOfSeats)
				WHERE ServiceId=CAST(:destServiceId AS INTEGER);
		</Procedure>
		<Procedure name="joinTables">
				INSERT INTO tblservice.ServiceOrders(ServiceId, OrderId, POSId, UserId, State)
				SELECT CAST(:destServiceId AS INTEGER), ServiceOrders.OrderId, ServiceOrders.POSId, ServiceOrders.UserId, ServiceOrders.State
				FROM tblservice.ServiceOrders
				WHERE ServiceOrders.ServiceId = CAST(:fromServiceId AS INTEGER)
				AND EXISTS (
					  SELECT 1 FROM tblservice.TableService WHERE ServiceId=CAST(:destServiceId AS INTEGER)
				); 
				    
				DELETE FROM tblservice.ServiceOrders
				WHERE ServiceId=CAST(:fromServiceId AS INTEGER);

				UPDATE tblservice.RestaurantTable
				SET Status=(SELECT Status FROM tblservice.TableStatus WHERE TableStatus.Descr="Linked"),
				    LinkedTableId=(SELECT TableId FROM tblservice.TableService WHERE ServiceId=CAST(:destServiceId AS INTEGER))
				WHERE TableId=(
						SELECT TableId FROM tblservice.TableService 
						WHERE ServiceId=CAST(:fromServiceId AS INTEGER)
				); 
				
				UPDATE tblservice.TableService
				SET NumberOfSeats=COALESCE(CAST(:numberOfSeats AS INTEGER), NumberOfSeats)
				WHERE ServiceId=CAST(:destServiceId AS INTEGER);
		</Procedure>
		<Procedure name="linkTable">
				UPDATE tblservice.RestaurantTable
				SET Status=(SELECT Status FROM tblservice.TableStatus WHERE TableStatus.Descr="Linked"),
				    LinkedTableId=(SELECT TableId FROM tblservice.TableService WHERE ServiceId=CAST(:destServiceId AS INTEGER))
				WHERE TableId=CAST(:fromTableId AS VARCHAR);

				UPDATE tblservice.TableService
				SET NumberOfSeats=COALESCE(CAST(:numberOfSeats AS INTEGER), NumberOfSeats)
				WHERE ServiceId=CAST(:destServiceId AS INTEGER);
		</Procedure>
		<Procedure name="unlinkTables">
				UPDATE tblservice.RestaurantTable
				SET Status=(SELECT Status FROM tblservice.TableStatus WHERE TableStatus.Descr="Closed"),
				    POSId=NULL,
				    LinkedTableId=NULL
				WHERE LinkedTableId=(
						  SELECT TableId FROM tblservice.TableService 
						  WHERE ServiceId=CAST(:serviceId AS INTEGER)
				  )
				  AND TableId=COALESCE(CAST(:tableId AS VARCHAR), TableId); 
		</Procedure>
		
		<!--  Procedures that depends on Order DDL  -->
		<Procedure name="getTableServiceOrderState">
			SELECT
				TS.ServiceId AS serviceId,
				(SELECT Descr FROM tblservice.TableStatus WHERE Status=RT.Status) AS serviceState,
				(SELECT StateDescr FROM orderdb.OrderState WHERE StateId=O.StateId) AS currentOrderState,
				O.OrderId AS orderId
			FROM tblservice.TableService TS
			JOIN tblservice.RestaurantTable RT ON RT.TableId=TS.TableId
			JOIN orderdb.POS P ON P.POSId=RT.POSId
			LEFT JOIN orderdb.Orders O ON O.OrderId=P.CurrentOrder
			WHERE TS.ServiceId=CAST(:serviceId AS INTEGER);
		</Procedure>
		<Procedure name="sliceServiceOrders">
		    DELETE FROM temp.SlicedService;
		    INSERT INTO temp.SlicedService(ServiceId, OrderId, LineNumber, SliceLineNumber)
				SELECT
						TS.ServiceId AS ServiceId,
						CAST(JSONGet('originalOrderId', L.Id) AS INTEGER) AS OriginalOrderId,
						CAST(JSONGet('lineNumber', L.Id) AS INTEGER) AS LineNumber,
						CAST(JSONGet('sliceLineNumber', L.Id) AS INTEGER) AS SliceLineNumber
				FROM
						PreparedStringTable L
				JOIN
						tblservice.TableService TS ON 1=1
				WHERE
						TS.ServiceId=CAST(:serviceId AS INTEGER);

				-- -----------------------------------
				-- Updates in the destination Orders
				-- -----------------------------------
				INSERT INTO orderdb.OrderItem(OrderId,LineNumber,ItemId,Level,PartCode,OrderedQty,LastOrderedQty,IncQty,DecQty,PriceKey,DiscountAmount,SurchargeAmount,OnlyFlag,OverwrittenUnitPrice,DefaultQty,LastUpdate)
				SELECT CAST(:orderId AS INTEGER),SliceLineNumber,ItemId,Level,PartCode,OrderedQty,LastOrderedQty,IncQty,DecQty,PriceKey,DiscountAmount,SurchargeAmount,OnlyFlag,OverwrittenUnitPrice,DefaultQty,strftime('%Y-%m-%dT%H:%M:%f', 'now')
				  FROM temp.SlicedService SS
				  JOIN orderdb.OrderItem OI
				    ON OI.OrderId=SS.OrderId
				   AND OI.LineNumber=SS.LineNumber
				WHERE SS.ServiceId=CAST(:serviceId AS INTEGER);
				
				INSERT INTO orderdb.OrderTax(OrderId, LineNumber, ItemId, Level, PartCode, TaxRuleId, BaseAmountBD, BaseAmountAD, TaxAmountBD, TaxAmountAD, TaxFiscalIndex, TaxIncluded, TaxRate, TaxAmount)
				SELECT CAST(:orderId AS INTEGER), SliceLineNumber, ItemId, Level, PartCode, TaxRuleId, BaseAmountBD, BaseAmountAD, TaxAmountBD, TaxAmountAD, TaxFiscalIndex, TaxIncluded, TaxRate, TaxAmount
				  FROM temp.SlicedService SS
				  JOIN orderdb.OrderTax OT
				    ON OT.OrderId=SS.OrderId
				   AND OT.LineNumber=SS.LineNumber
				WHERE SS.ServiceId=CAST(:serviceId AS INTEGER);

				INSERT INTO orderdb.OrderComment(CommentId, OrderId, LineNumber, ItemId, Level, PartCode, Comment, Hash)
				SELECT CommentId, CAST(:orderId AS INTEGER), SliceLineNumber, ItemId, Level, PartCode, Comment, Hash
				  FROM temp.SlicedService SS
				  JOIN orderdb.OrderComment OC
				    ON OC.OrderId=SS.OrderId
				   AND OC.LineNumber=SS.LineNumber
				WHERE SS.ServiceId=CAST(:serviceId AS INTEGER);
				
				INSERT INTO orderdb.OrderDiscount(OrderId, LineNumber, ItemId, Level, PartCode, DiscountId, DiscountAmount)
				SELECT CAST(:orderId AS INTEGER), SliceLineNumber, ItemId, Level, PartCode, DiscountId, DiscountAmount
				  FROM temp.SlicedService SS
				  JOIN orderdb.OrderDiscount OD
				    ON OD.OrderId=SS.OrderId
				   AND OD.LineNumber=SS.LineNumber
				WHERE SS.ServiceId=CAST(:serviceId AS INTEGER);

				INSERT INTO orderdb.OrderItemCustomProperties(OrderId, LineNumber, ItemId, Level, PartCode, Key, Value)
				SELECT CAST(:orderId AS INTEGER), SliceLineNumber, ItemId, Level, PartCode, Key, Value
				  FROM temp.SlicedService SS
				  JOIN orderdb.OrderItemCustomProperties OICP
				    ON OICP.OrderId=SS.OrderId
				   AND OICP.LineNumber=SS.LineNumber
				WHERE SS.ServiceId=CAST(:serviceId AS INTEGER);
				
				INSERT OR REPLACE INTO orderdb.Orders(OrderId, StateId, OrderType, OrderSubType, OriginatorId, OriginatorNumber, SaleType, ExemptionCode, LineCounter, CreatedAt, LastNewLineAt, LastModifiedLine, BusinessPeriod, DistributionPoint, SessionId, PriceListId1, PriceListId2, PriceListId3, AdditionalInfo, PriceListTotal, TotalNet, TotalGross, DiscountAmount, TotalTaxIncluded, TotalTaxAmountBD, TotalTaxAmountAD, Fiscal, Backup, MultiOrderId, Major, Minor, Tip)
				SELECT O.OrderId, 
				       O.StateId, 
				       O.OrderType, 
				       O.OrderSubType, 
				       O.OriginatorId, 
				       O.OriginatorNumber, 
				       O.SaleType, 
				       O.ExemptionCode, 
							 (
									SELECT MAX(SS.SliceLineNumber) 
									FROM temp.SlicedService SS 
									WHERE SS.ServiceId=CAST(:serviceId AS INTEGER)
							 ) AS LineCounter, 
				       strftime('%Y-%m-%dT%H:%M:%f', 'now'), 
				       strftime('%Y-%m-%dT%H:%M:%f', 'now'), 
				       O.LastModifiedLine, 
				       O.BusinessPeriod, 
				       O.DistributionPoint, 
				       O.SessionId, 
				       O.PriceListId1, 
				       O.PriceListId2, 
				       O.PriceListId3, 
				       O.AdditionalInfo, 
				       O.PriceListTotal, 
				       O.TotalNet, 
				       O.TotalGross, 
				       O.DiscountAmount, 
				       O.TotalTaxIncluded, 
				       O.TotalTaxAmountBD, 
				       O.TotalTaxAmountAD, 
				       O.Fiscal, 
				       O.Backup, 
				       O.MultiOrderId, 
				       O.Major, 
				       O.Minor, 
				       O.Tip
				FROM orderdb.Orders O
				WHERE O.OrderId=CAST(:orderId AS INTEGER);

				INSERT INTO orderdb.OrderPrice(OrderId, PriceKey, DefaultUnitPrice, AddedUnitPrice, SubtractedUnitPrice, Computed, IncludedQty, ValidFrom, ValidThru)
				SELECT DISTINCT CAST(:orderId AS INTEGER), PriceKey, DefaultUnitPrice, AddedUnitPrice, SubtractedUnitPrice, Computed, IncludedQty, ValidFrom, ValidThru
				FROM orderdb.OrderPrice
				WHERE OrderId IN (SELECT DISTINCT OrderId FROM temp.SlicedService)
				  AND PriceKey IN (SELECT DISTINCT PriceKey FROM orderdb.OrderItem WHERE OrderId=CAST(:orderId AS INTEGER));

				-- -----------------------------
				-- Updates in the source Orders
				-- -----------------------------
				INSERT INTO orderdb.OrderVoidHistory(OrderId, LineNumber, ItemId, Level, PartCode, Timestamp, DecQty, PriceKey, OverwrittenUnitPrice, AfterTotal)
				SELECT OI.OrderId, OI.LineNumber, ItemId, Level, PartCode, strftime('%Y-%m-%dT%H:%M:%f', 'now'), OrderedQty, PriceKey, OverwrittenUnitPrice, 0
				  FROM temp.SlicedService SS
				  JOIN orderdb.OrderItem OI
				    ON OI.OrderId=SS.OrderId
				   AND OI.LineNumber=SS.LineNumber
				WHERE SS.ServiceId=CAST(:serviceId AS INTEGER)
				  AND OrderedQty IS NOT NULL;

				INSERT OR REPLACE INTO orderdb.OrderItem(OrderId,LineNumber,ItemId,Level,PartCode,OrderedQty,LastOrderedQty,IncQty,DecQty,PriceKey,DiscountAmount,SurchargeAmount,OnlyFlag,OverwrittenUnitPrice,DefaultQty,LastUpdate)
				SELECT OI.OrderId,OI.LineNumber,ItemId,Level,PartCode,0,OrderedQty,IncQty,DecQty+COALESCE(OrderedQty,0),PriceKey,DiscountAmount,SurchargeAmount,OnlyFlag,OverwrittenUnitPrice,DefaultQty,strftime('%Y-%m-%dT%H:%M:%f', 'now')
				  FROM temp.SlicedService SS
				  JOIN orderdb.OrderItem OI
				    ON OI.OrderId=SS.OrderId
				   AND OI.LineNumber=SS.LineNumber
				WHERE SS.ServiceId=CAST(:serviceId AS INTEGER);

				UPDATE orderdb.Orders
				   SET StateId=(SELECT StateId FROM orderdb.OrderState WHERE StateDescr="SYSTEM_VOIDED")
				 WHERE OrderId IN (
						SELECT DISTINCT OrderId
						FROM temp.SlicedService
						WHERE ServiceId=CAST(:serviceId AS INTEGER)
				 )
				 AND NOT EXISTS (
					SELECT DISTINCT OI.OrderId
					  FROM temp.SlicedService SS
					  JOIN orderdb.OrderItem OI
					    ON OI.OrderId=SS.OrderId
					   AND OI.Level='0'
					 WHERE SS.ServiceId=CAST(:serviceId AS INTEGER)
					   AND TDCMP(OI.OrderedQty,0) &gt; 0
				 );

				 DELETE FROM tblservice.ServiceOrders
				 WHERE OrderId IN (
						SELECT DISTINCT Orders.OrderId
						  FROM temp.SlicedService
						  JOIN orderdb.Orders ON Orders.OrderId=SlicedService.OrderId
						 WHERE SlicedService.ServiceId=CAST(:serviceId AS INTEGER)
						   AND Orders.StateId=(SELECT StateId FROM orderdb.OrderState WHERE StateDescr="SYSTEM_VOIDED")
				 );
		</Procedure>
		<Procedure name="splitServiceOrders">
				INSERT INTO orderdb.CurrentOrderItem(OrderId,LineNumber,ItemId,Level,PartCode,OrderedQty,LastOrderedQty,IncQty,DecQty,PriceKey,DiscountAmount,SurchargeAmount,OnlyFlag,OverwrittenUnitPrice,DefaultQty,LastUpdate)
				SELECT SS.SplitOrderId,SS.SplitLineNumber,ItemId,Level,PartCode,OrderedQty,LastOrderedQty,IncQty,DecQty,PriceKey,DiscountAmount,SurchargeAmount,OnlyFlag,OverwrittenUnitPrice,DefaultQty,LastUpdate
				  FROM tblservice.ServiceSplit SS
				  JOIN orderdb.OrderItem OI
				    ON OI.OrderId=SS.OrderId
				   AND OI.LineNumber=SS.LineNumber
				WHERE SS.ServiceId=CAST(:serviceId AS INTEGER);
				
				INSERT OR REPLACE INTO orderdb.Orders(OrderId, StateId, OrderType, OrderSubType, OriginatorId, OriginatorNumber, SaleType, ExemptionCode, LineCounter, CreatedAt, LastNewLineAt, LastModifiedLine, BusinessPeriod, DistributionPoint, SessionId, PriceListId1, PriceListId2, PriceListId3, AdditionalInfo, PriceListTotal, TotalNet, TotalGross, DiscountAmount, TotalTaxIncluded, TotalTaxAmountBD, TotalTaxAmountAD, Fiscal, Backup, MultiOrderId, Major, Minor, Tip)
				SELECT O.OrderId, 
				       O.StateId, 
				       O.OrderType, 
				       O.OrderSubType, 
				       O.OriginatorId, 
				       O.OriginatorNumber, 
				       O.SaleType, 
				       O.ExemptionCode, 
					   (
							SELECT MAX(SS.SplitLineNumber) 
							FROM tblservice.ServiceSplit SS 
							WHERE SS.ServiceId=CAST(:serviceId AS INTEGER)
							  AND SS.SplitOrderId=O.OrderId
					   ) AS LineCounter, 
				       O.CreatedAt, 
				       O.LastNewLineAt, 
				       O.LastModifiedLine, 
				       O.BusinessPeriod, 
				       O.DistributionPoint, 
				       O.SessionId, 
				       O.PriceListId1, 
				       O.PriceListId2, 
				       O.PriceListId3, 
				       O.AdditionalInfo, 
				       O.PriceListTotal, 
				       O.TotalNet, 
				       O.TotalGross, 
				       O.DiscountAmount, 
				       O.TotalTaxIncluded, 
				       O.TotalTaxAmountBD, 
				       O.TotalTaxAmountAD, 
				       O.Fiscal, 
				       O.Backup, 
				       O.MultiOrderId, 
				       O.Major, 
				       O.Minor, 
				       O.Tip
				FROM orderdb.Orders O
				WHERE O.OrderId IN (
						SELECT DISTINCT SplitOrderId
						FROM tblservice.ServiceSplit
						WHERE ServiceId=CAST(:serviceId AS INTEGER)
				);

				INSERT OR REPLACE INTO orderdb.OrderItemCustomProperties(OrderId, LineNumber, ItemId, Level, PartCode, Key, Value)
				SELECT SS.SplitOrderId, SS.SplitLineNumber, OICP.ItemId, OICP.Level, OICP.PartCode, OICP.Key, OICP.Value
				  FROM tblservice.ServiceSplit SS
				  JOIN orderdb.OrderItemCustomProperties OICP
				    ON OICP.OrderId=SS.OrderId
				   AND OICP.LineNumber=SS.LineNumber
				WHERE SS.ServiceId=CAST(:serviceId AS INTEGER);

				SELECT DISTINCT ST.ServiceTenderId AS ServiceTenderId, OT.TenderId AS TenderId, OT.TenderDetail As TenderDetail, ST.TotalTenderAmount AS TotalTenderAmount 
				  FROM tblservice.ServiceTenders ST
				  JOIN orderdb.OrderTender OT
				    ON OT.OrderTenderId=ST.OrderTenderId
				   AND OT.OrderId=ST.OrderId
				 WHERE ST.ServiceId=CAST(:serviceId AS INTEGER)
				   AND OT.OrderId NOT IN (
							SELECT DISTINCT SplitOrderId
							FROM tblservice.ServiceSplit
							WHERE ServiceId=CAST(:serviceId AS INTEGER)
				   );
				
				DELETE FROM tblservice.ServiceTenders
				WHERE ServiceId=CAST(:serviceId AS INTEGER);
				
				DELETE FROM tblservice.ServiceTip
				WHERE ServiceId=CAST(:serviceId AS INTEGER);
		</Procedure>
		<Procedure name="resetSplitService">
				UPDATE orderdb.Orders
				   SET StateId=(SELECT StateId FROM orderdb.OrderState WHERE StateDescr="SYSTEM_VOIDED")
				 WHERE OrderId IN (
						SELECT DISTINCT SplitOrderId
						FROM tblservice.ServiceSplit
						WHERE ServiceId=CAST(:serviceId AS INTEGER)
				 );
				 
				DELETE FROM tblservice.ServiceOrders
				WHERE ServiceId=CAST(:serviceId AS INTEGER)
				  AND OrderId IN (
						SELECT DISTINCT SplitOrderId
						FROM tblservice.ServiceSplit
						WHERE ServiceId=CAST(:serviceId AS INTEGER)
				);
				 
				DELETE FROM tblservice.ServiceSplit
				WHERE ServiceId=CAST(:serviceId AS INTEGER);
		</Procedure>
		<Procedure name="getServiceOrderItem">
				SELECT SO.OrderId AS originalOrderId, '['||GROUP_CONCAT(OI.LineNumber)||']' AS lineNumbers  
				  FROM tblservice.ServiceOrders SO
				  JOIN orderdb.OrderItem OI ON OI.OrderId=SO.OrderId
				 WHERE SO.ServiceId=CAST(:serviceId AS INTEGER)
		       AND (
		       		SO.State IS NULL OR 
		       	  SO.State NOT IN (
		       						'SYSTEM_VOIDED', 
		       						'ABANDONED', 
		       						'PAID', 
		       						'VOIDED'
		       				)
		       		)
				   AND OI.Level=0
				   AND OI.OrderedQty>0
				 GROUP BY SO.OrderId;
		</Procedure>
		<Procedure name="registerServiceTenders">
				DELETE FROM temp.TSMemory;

				INSERT INTO temp.TSMemory(MemKey, MemValue)
				SELECT MemKey, MemValue
				FROM (
						SELECT 'ServiceTenderId' AS MemKey, (COUNT(1)+1) AS MemValue
						FROM tblservice.ServiceTenders
						WHERE ServiceId=CAST(:serviceId AS INTEGER)
				) M;
				
				INSERT INTO tblservice.ServiceTenders(ServiceTenderId, ServiceId, TotalTenderAmount, OrderTenderId, OrderId)
				SELECT (SELECT CAST(MemValue AS INTEGER) FROM temp.TSMemory WHERE MemKey='ServiceTenderId') AS ServiceTenderId,
							 CAST(:serviceId AS INTEGER) AS ServiceId,
							 CAST(:totalTenderAmount AS VARCHAR) AS TotalTenderAmount,
							 OT.OrderTenderId AS OrderTenderId,
							 OT.OrderId AS OrderId
				  FROM orderdb.OrderTender OT
				  JOIN temp.PreparedIntegerTable O
				    ON O.Id=OT.OrderId
				  LEFT JOIN tblservice.ServiceTenders ST
				    ON ST.ServiceId=CAST(:serviceId AS INTEGER)
				   AND ST.OrderTenderId=OT.OrderTenderId
				   AND ST.OrderId=OT.OrderId
				 WHERE ST.ServiceTenderId IS NULL;
		</Procedure>
		<Procedure name="getServiceTendersConsolidated">
				SELECT DISTINCT
								ST.ServiceTenderId AS serviceTenderId, 
								OT.TenderId AS tenderId, 
								OT.TenderDetail AS tenderDetail, 
								ST.TotalTenderAmount AS tenderAmount 
				  FROM tblservice.ServiceTenders ST
				  JOIN orderdb.OrderTender OT
				    ON OT.OrderTenderId=ST.OrderTenderId
				   AND OT.OrderId=ST.OrderId
				 WHERE ST.ServiceId=CAST(:serviceId AS INTEGER)
				   AND OT.OrderId IN (
							SELECT DISTINCT SplitOrderId
							FROM tblservice.ServiceSplit
							WHERE ServiceId=CAST(:serviceId AS INTEGER)
				   );
		</Procedure>
		<Procedure name="getServiceTenders">
				SELECT ST.ServiceTenderId AS serviceTenderId,
							 ST.ServiceId AS serviceId,
							 ST.OrderTenderId AS orderTenderId,
							 ST.OrderId AS orderId,
							 OT.TenderId AS tenderId,
							 OT.Timestamp AS timestamp,
							 OT.TenderAmount AS tenderAmount,
							 OT.TenderDetail AS tenderDetail,
							 OT.ChangeAmount AS changeAmount
				  FROM orderdb.OrderTender OT
				  JOIN tblservice.ServiceTenders ST 
				    ON ST.ServiceId=CAST(:serviceId AS INTEGER)
				   AND ST.OrderTenderId=OT.OrderTenderId
				   AND ST.OrderId=OT.OrderId
				 WHERE ST.OrderId IN (
							    SELECT DISTINCT SplitOrderId
							      FROM tblservice.ServiceSplit
							     WHERE ServiceId=CAST(:serviceId AS INTEGER)
							 );
		</Procedure>
		<Procedure name="clearServiceTenders">
				DELETE FROM orderdb.OrderTender
				WHERE _ROWID_ IN (
						SELECT OT._ROWID_
						  FROM orderdb.OrderTender OT
						  JOIN tblservice.ServiceTenders ST 
						    ON ST.ServiceId=CAST(:serviceId AS INTEGER)
						   AND ST.OrderTenderId=OT.OrderTenderId
						   AND ST.OrderId=OT.OrderId
						 WHERE ST.ServiceTenderId=COALESCE(CAST(:serviceTenderId AS INTEGER), ST.ServiceTenderId)
						   AND ST.OrderId=COALESCE(CAST(:orderId AS INTEGER), ST.OrderId)
				);
				DELETE FROM tblservice.ServiceTenders
				WHERE ServiceTenderId=COALESCE(CAST(:serviceTenderId AS INTEGER), ServiceTenderId) 
				  AND ServiceId=CAST(:serviceId AS INTEGER)
			    AND OrderId=COALESCE(CAST(:orderId AS INTEGER), OrderId);
		</Procedure>
</Procedures>
